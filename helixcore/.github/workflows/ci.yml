name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run Black
        run: black --check helixcore/
      
      - name: Run Ruff
        run: ruff check helixcore/
      
      - name: Run MyPy
        run: mypy helixcore/

  test-python:
    name: Test Python Code
    runs-on: ubuntu-latest
    needs: lint-python
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: helixcore
          POSTGRES_PASSWORD: helixcore
          POSTGRES_DB: helixcore_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      temporal:
        image: temporalio/auto-setup:latest
        ports:
          - 7233:7233
        env:
          DB: postgresql
          DB_PORT: 5432
          POSTGRES_USER: temporal
          POSTGRES_PWD: temporal
          POSTGRES_SEEDS: postgres
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Generate protobuf files
        run: |
          python -m grpc_tools.protoc \
            -I=helixcore/interfaces/proto \
            --python_out=helixcore/interfaces/proto \
            --grpc_python_out=helixcore/interfaces/proto \
            helixcore/interfaces/proto/*.proto
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://helixcore:helixcore@localhost:5432/helixcore_test
          TEMPORAL_HOST: localhost:7233
        run: |
          pytest -v --cov=helixcore --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-frontend:
    name: Build TypeScript Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: helixcore/portal/package-lock.json
      
      - name: Install dependencies
        working-directory: helixcore/portal
        run: npm ci
      
      - name: TypeScript type check
        working-directory: helixcore/portal
        run: npm run type-check
      
      - name: ESLint
        working-directory: helixcore/portal
        run: npm run lint
      
      - name: Build
        working-directory: helixcore/portal
        run: npm run build
      
      - name: Run tests
        working-directory: helixcore/portal
        run: npm test -- --coverage

  validate-helm:
    name: Validate Helm Charts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'
      
      - name: Lint Helm charts
        run: |
          helm lint charts/helixcore/
      
      - name: Template Helm charts
        run: |
          helm template helixcore charts/helixcore/ > /tmp/manifest.yaml
      
      - name: Validate Kubernetes manifests
        uses: instrumenta/kubeval-action@master
        with:
          files: /tmp/manifest.yaml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r helixcore/ -f json -o bandit-report.json
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-python, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/helixcore:latest
            ghcr.io/${{ github.repository }}/helixcore:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-python, build-frontend, validate-helm, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 23
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git